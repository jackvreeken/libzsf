name: CI

on:
  pull_request:
  push:


jobs:
  style-c:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install and update dependencies
      - run: |
          apt-get update \
          apt-get install -y clang-format git
      - name: Check C code formatting
        run: |
          clang-format -i src/* include/* \
          git diff --exit-code

  style-python:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.6
      - name: Install dependencies
      - run: |
          pip install tox \
          cd wrappers/python
      - name: Check Python code formatting
        run:
          tox -vv -e flake8,black

  # test:
  #   needs: style
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #       python-version: [3.7, 3.8, 3.9]

  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #   - uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - run: |
  #       python -m pip install --upgrade pip
  #       pip install tox
  #   - run: tox -e py

  # coverage:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: ${{ !startsWith(github.ref, 'refs/tags') }}

  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: true
  #   - uses: actions/setup-python@v4
  #     with:
  #       python-version: 3.9
  #   - run: |
  #       python -m pip install --upgrade pip
  #       pip install tox
  #   - run: tox -e coverage
  #   - uses: codecov/codecov-action@v3
  #     with:
  #       file: ./coverage.xml

  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags') }}

  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-python@v4
  #     with:
  #       python-version: 3.9
  #   - run: |
  #       python -m pip install --upgrade pip
  #       pip install setuptools wheel twine
  #   - env:
  #       TWINE_USERNAME: __token__
  #       TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #     run: |
  #       python setup.py sdist bdist_wheel
  #       twine upload dist/*
